// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String            @id @default(cuid()) @map("_id")
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdChores  Chore[]           @relation("ChoreCreator")
  assignedChores Chore[]           @relation("ChoreAssignee")
  completions    ChoreCompletion[]
}

model Chore {
  id          String            @id @default(cuid()) @map("_id")
  title       String
  description String
  type        String // Could specify the type of chore, e.g., "cleaning", "maintenance"
  recurrence  recurrenceEnum
  interval    Int
  startDate   DateTime
  creatorId   String
  assigneeId  String?
  creator     User              @relation("ChoreCreator", fields: [creatorId], references: [id])
  assignee    User?             @relation("ChoreAssignee", fields: [assigneeId], references: [id])
  completions ChoreCompletion[]
}

model ChoreCompletion {
  id          String   @id @default(cuid()) @map("_id")
  choreId     String
  userId      String
  completedAt DateTime @default(now())
  chore       Chore    @relation(fields: [choreId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

enum recurrenceEnum {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}
